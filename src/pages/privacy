---
import Layout from '../layouts/Layout.astro';
import ContextAlert from '../components/ContextAlert.astro';
import Markdown from '../components/Markdown.astro';
import { cacheHeaders, randomInt } from '../utils';

export const prerender = false;

const tags = ['/revalidation', 'cats-related', 'all-pets-related'];
const headers = cacheHeaders(365, tags);

Object.entries(headers).map(([k, v]) => {
    Astro.response.headers.set(k, v);
});

const explainer = `
<h1>Privacy Policy</h1>
  <p>Last updated: July 27, 2025</p>

  <p>Clariflavor ("we", "us", or "our") operates the website clariflavor.netlify.app (the "Site").</p>

  <p>This page informs you of our policies regarding the collection, use, and disclosure of personal data when you use our service.</p>

  <h2>Information We Collect</h2>
  <p>We may collect limited personal information such as email addresses when voluntarily submitted via our forms. This information is used solely to deliver personalized recipe suggestions or updates if requested.</p>

  <h2>Use of Data</h2>
  <p>We use the collected data to:</p>
  <ul>
    <li>Provide personalized recipe suggestions</li>
    <li>Send occasional emails if you opt in</li>
    <li>Improve user experience</li>
  </ul>

  <h2>Third-Party Services</h2>
  <p>We may use third-party services like OpenAI, Make.com, Tally.so, and Google APIs to process inputs and deliver content. We do not sell or share your personal data with third parties.</p>

  <h2>Security</h2>
  <p>We take reasonable measures to protect your data but cannot guarantee absolute security due to the nature of the internet.</p>

  <h2>Contact Us</h2>
  <p>If you have any questions about this Privacy Policy, you can contact us at clariflavor@gmail.com.</p>
`;

const exampleTag = tags[randomInt(0, tags.length - 1)];
---

<Layout title="Privacy Policy">
    <h1 class="mb-10">xxx</h1>
    <Markdown content={explainer} class="mb-10" />
    <div class="flex flex-wrap gap-4">
        <button class="revalidate-button btn" data-tag={exampleTag}>Invalidate tag: {exampleTag}</button>
        <button class="btn" onclick="location.reload()">Reload page</button>
    </div>
</Layout>

<script>
    function revalidate(tag: string) {
        fetch('/api/revalidate', {
            method: 'POST',
            body: JSON.stringify({ tags: [tag] }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        alert(`Invalidated tag: ${tag}`);
    }

    const revalidateButton = document.querySelectorAll('button.revalidate-button')[0];
    revalidateButton.addEventListener('click', (e) => {
        const tag = (e.target as HTMLButtonElement).getAttribute('data-tag');
        revalidate(tag);
    });
</script>
